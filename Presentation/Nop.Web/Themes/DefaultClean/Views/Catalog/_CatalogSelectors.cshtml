@model CatalogPagingFilteringModel
<div class="row justify-content-end">
    <div class="wop col-12 col-md-8 col-lg-8 col-xl-8">
        <div class="row justify-content-end">

            <div class="wop col-12 col-md-7 col-lg-7 col-xl-7">
                <div class="product-selectors">
                    @*view mode*@



                    @*sorting*@
                    @if (Model.AllowProductSorting)
                    {
                        <div class="display-sort-zone-mobile">
                            <div class="row product-sorting-version-mobile">
                                <div class="wop col-4">
                                    <span><img src="images/eye.png" style=" margin-left: -3px;" /></span>@T("Catalog.PageSize")
                                </div>
                                <div class="wop col-8">
                                    <span><img src="images/order.png" style="  margin-left: -3px;" /></span>@T("Catalog.OrderBy")
                                </div>
                            </div>
                            <div class="row product-sorting-version-mobile">
                                <div class="wop col-4">
                                    @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.PageSize.Label") })
                                </div>
                                <div class="wop col-8">
                                    @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.OrderBy.Label") })
                                </div>
                            </div>
                        </div>
                        

                        <div class="product-sorting">
                            <div class="row mb-2">
                                <i class="fas fa-sort-amount-down-alt"></i>
                                <span><img src="images/order.png" style="  margin-left: -3px;" />@T("Catalog.OrderBy")</span>
                            </div>
                            <div class="row">
                                @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.OrderBy.Label") })
                            </div>
                        </div>
                    }

                    @*page size*@
                    <link rel="stylesheet" href="~/lib/fontAwesome/css/font-awesome.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">
                    <link rel="stylesheet" href="~/lib/fontAwesome/css/font-awesome.min.css integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

                    @if (Model.AllowCustomersToSelectPageSize)
                    {
                        <div class="product-page-size">
                            <div class="row mb-2">
                                <i class="fas fa-eye"></i>
                                <span><img src="images/eye.png" style=" margin-left: -3px;" />@T("Catalog.PageSize")</span>
                            </div>
                            <div class="row">
                                @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);", aria_label = T("Catalog.PageSize.Label") })
                            </div>
                        </div>

                    }
                </div>
            </div>
            <div class="col-3 col-md-3 col-lg-3 col-xl-3 d-flex">
                @if (Model.AllowProductViewModeChanging)
                {
                    <div class="row my-auto ml-auto">
                        <div class="col-12 d-flex">
                            <div class="product-viewmode">
                                @*<span>@T("Catalog.ViewMode")</span>
                                    <br />*@
                                @if (Model.AvailableViewModes.Count > 1)
                                {
                                    var gridMode = Model.AvailableViewModes[0];
                                    var listMode = Model.AvailableViewModes[1];

                                    <div class="viewmode @if(gridMode.Selected){<text>selectedviewmode</text>} mt-2">
                                        <img class="img-viewmode-mobile img-fluid cursorPointer" src="~/images/view-grid.png" style="margin: 3px 10px !important;position:absolute" title="@gridMode.Text" onclick="window.location.href='@gridMode.Value'" />
                                    @*    <a class="viewmode-icon grid @if(gridMode.Selected){<text>selected</text>} icon-grid-vertical" href="@gridMode.Value" title="@gridMode.Text">&nbsp; </a>*@
                                    </div>
                                    <div class="viewmode @if (listMode.Selected){<text>selectedviewmode</text>} mt-2">
                                        <img class="img-viewmode-mobile img-fluid cursorPointer" src="~/images/view-list.png" style="margin: 3px 10px !important;position:absolute" title="@listMode.Text" onclick="window.location.href='@listMode.Value'" />
                                        @*<a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" href="@listMode.Value" title="@listMode.Text">&nbsp; </a>*@
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>
