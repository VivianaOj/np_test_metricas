@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Domain.Common

@inject CatalogSettings catalogSettings
@inject CommonSettings commonSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }
    var ButtonOldPrice = "";
    if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice)) { ButtonOldPrice = "ButtonOldPrice"; }
    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}

<style>
    #rowproductshomepage > div > div > div:nth-child(2) > div.col-md-5.col-lg-5 > div > div:nth-child(3) {
        height: 83px !important;
        margin-top: 30px;
    }
</style>
<input type="hidden" id="brandedItems_@Model.Id"name="brandedItems_@Model.Id" value="@Model.Custitem_branded_variants" />

<div class="product-item" data-productid="@Model.Id">
    <div class="titlesproduct" style="position:absolute">
        <div class="product-title-breadcrumb pt-2">
            @{ var bread = "";}
            @if (Model.DisplayCategoryBreadcrumb)
            {
                int isLastCategory = Model.CategoryBreadcrumb.Count();
                int i = 1;
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    @if (i == isLastCategory)
                    {
                        bread += cat.Name;

                    }
                    else
                    {
                        //bread += cat.Name + @breadcrumbDelimiter;

                    }

                    i++;
                }

            }

            <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@bread</a>
        </div>
        <h2 class="product-title">
            <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
        </h2>
        @if (Model.OutStock)
        {
            <div class="message-error" style="font-weight:900;font-size: 0.8rem !important;"><ul>@T("OutStock")</ul></div>

        }
    </div>
    <div class="text-center img-home-v-mobile" style="@Html.Raw(Model.CustomProperties.ContainsKey("HeightImage")?Model.CustomProperties["HeightImage"]:"height:17rem")">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img style="margin-top: 4.5rem;" height="100%" width="100%" class="@Html.Raw(Model.CustomProperties.ContainsKey("HeightImage")?"h-75":"img-fluid") img-product-home-mobile" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details" style="height: 80px;">
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="add-info mt-1">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="row" style="margin:0px">
                <div class="col-6 col-md-8 col-lg-8 my-auto">
                    <div class="prices">
                        <div class="row">
                            <div class="col-12">
                                @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                                {

                                    <span class="price old-price ml-2">@Model.ProductPrice.OldPrice</span>

                                }
                                <span class="price actual-price ml-2">@Model.ProductPrice.Price</span>
                                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                                {
                                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                                    //of course, you can modify appropriate locales to include VAT info there
                                    <div class="col-12">
                                        <span class="tax-shipping-info">
                                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                                        </span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                                {
                                    <div class="col-12">
                                        <div class="base-price-pangv">
                                            @Model.ProductPrice.BasePricePAngV
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                </div>
                <div class="col-6 col-md-4 col-lg-4 my-auto">
                    <div class="buttons float-right mr-2">
                        @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                        @*@if (!Model.ProductPrice.DisableBuyButton)
                            {
                                var addToCartText = T("ShoppingCart.AddToCart").Text;
                                if (Model.ProductPrice.IsRental)
                                {
                                    addToCartText = T("ShoppingCart.Rent").Text;
                                }
                                if (Model.ProductPrice.AvailableForPreOrder)
                                {
                                    addToCartText = T("ShoppingCart.PreOrder").Text;
                                }
                                <input type="button" value="@(addToCartText)" style="display:none" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                            }*@

                        @if (Model.OutStock)
                        {
                            <img src="~/images/shopping_cart.svg" width="30" height="30" style="border-radius:5px;cursor:pointer;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                        }
                        else
                        {
                            @if (!Model.ProductPrice.DisableAddToCompareListButton)
                            {
                                <img class="btn-home-first-mobile btn-addtocart-card-mobile" src="~/images/shopping_cart.svg" width="30" height="30" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" data-toggle="modal" data-target="#modalAddToCart" />
                                @*<input type="button" value="@T("ShoppingCart.AddToCompareList")" title="@T("ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />*@
                                <img class="btn-home-first-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" width="30" height="30" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                                @*<i class="nn- nn-car footer-icon-size"  style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"></i>*@
                            }
                        }

                        @if (!Model.ProductPrice.DisableWishlistButton)
                        {
                            <img class="ml-2 btn-home-first-mobile btn-addtowish-card-mobile" src="~/images/favorite_border.svg" width="30" height="30" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" data-toggle="modal" data-target="#modalAddToWish" />
                            <img class="ml-2 btn-home-first-mobile btn-addtowish-card-desktop" src="~/images/favorite_border.svg" width="30" height="30" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                            @*<img src="~/Themes/DefaultClean/Content/images/wishlist-icon.png" style="border-radius: 5px; cursor: pointer; " onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />*@
                            @*<input type="button" value="@T("ShoppingCart.AddToWishlist")" title="@T("ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />*@
                        }
                    </div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
                </div>
            </div>


        </div>
    </div>
</div>

@*<style>
        .quickView, .quickViewWindow {
            min-width: 0 !important;
            width: 660px !important;
            position: fixed;
            top: 4% !important;
            bottom: 0;
            overflow-y: auto;
            max-height: 673px;
            top: 5% !important;
        }
    </style>*@