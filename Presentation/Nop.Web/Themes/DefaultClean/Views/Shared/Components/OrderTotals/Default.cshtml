@model OrderTotalsModel
@using System.Text.RegularExpressions;
@using System.Globalization;
<div class="total-info">
    <table class="cart-total">
        <tbody>
            <tr class="order-subtotal">
                <td class="cart-total-left">
                    <label>@T("ShoppingCart.Totals.SubTotal"):</label>
                </td>
                <td class="cart-total-right">
                    @{
                        string campoDecimal = Model.SubTotal;
                        string SubTotal = "";

                        string patron = @"^\d+\.(\d+)$";
                        Regex regex = new Regex(patron);
                        Match match = regex.Match(campoDecimal);
                        decimal numericValue;

                        if (match.Success)
                        {
                            if (match.Groups.Count > 0)
                            {
                                var DecimalNumber = match.Groups[1];
                                if (DecimalNumber.Length == 1)
                                {
                                    //string decimalPart = match.Groups[1].Value;
                                    //string integerPart = Regex.Replace(match.Value.Substring(0, match.Index), @"\d(?=(\d{3})+$)", "$&,");
                                    //SubTotal = integerPart + "." + decimalPart + "0";

                                    SubTotal = campoDecimal + "0";
                                }
                                else
                                {
                                    if (decimal.TryParse(campoDecimal, NumberStyles.Number, CultureInfo.InvariantCulture, out numericValue))
                                    {
                                        SubTotal = numericValue.ToString("F2", CultureInfo.InvariantCulture);
                                    }
                                    //if (DecimalNumber.Length > 2)
                                    //{
                                    //string decimalPart = match.Groups[1].Value;
                                    //string integerPart = Regex.Replace(match.Value.Substring(0, match.Index), @"\d(?=(\d{3})+$)", "$&,");
                                    //SubTotal = integerPart + "." + decimalPart;
                                    else
                                    {
                                        SubTotal = campoDecimal;
                                    }
                                }
                            }

                        }
                        else
                        {
                            SubTotal = campoDecimal + ".00";
                        }



                        <span class="value-summary">$</span><span id="O_SubTotal" class="value-summary totalId">@SubTotal</span>
                    }

                </td>
            </tr>
            @if (!string.IsNullOrEmpty(Model.SubTotalDiscount))
            {
                <tr class="order-subtotal-discount">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.SubTotalDiscount"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary">@Model.SubTotalDiscount</span>
                    </td>
                </tr>
            }
            @if (!Model.HideShippingTotal)
            {
                <tr class="shipping-cost">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.Shipping"):</label>
                        @if (Model.RequiresShipping && !string.IsNullOrEmpty(Model.SelectedShippingMethod))
                        {
                            <span class="selected-shipping-method">@T("ShoppingCart.Totals.Shipping.Method", Model.SelectedShippingMethod)</span>
                        }
                    </td>
                    <td class="cart-total-right">
                        @if (Model.RequiresShipping)
                        {
                            if (!string.IsNullOrEmpty(Model.Shipping))
                            {
                                <span class="value-summary">@Model.Shipping</span>
                            }
                            else
                            {
                                <span class="value-summary">$0.00</span>
                            }
                        }
                        else
                        {
                            <span class="value-summary">$0.00</span>
                        }
                    </td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(Model.PaymentMethodAdditionalFee))
            {
                <tr class="additional-fees">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.PaymentMethodAdditionalFee"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary">@Model.PaymentMethodAdditionalFee</span>
                    </td>
                </tr>
            }
            @if (Model.DisplayTaxRates && Model.TaxRates.Count > 0)
            {
                foreach (var taxRate in Model.TaxRates)
                {
                    <tr class="tax-rate">
                        <td class="cart-total-left">
                            <label>@string.Format(T("ShoppingCart.Totals.TaxRateLine").Text, taxRate.Rate):</label>
                        </td>
                        <td class="cart-total-right">
                            <span>@taxRate.Value</span>
                        </td>
                    </tr>
                }
            }
            @if (Model.DisplayTax)
            {
                <tr class="tax-value">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.Tax"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary" id="OrderTax">@Model.Tax</span>
                    </td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(Model.OrderTotalDiscount))
            {
                <tr class="discount-total">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.OrderTotalDiscount"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary">@Model.OrderTotalDiscount</span>
                    </td>
                </tr>
            }
            @if (Model.GiftCards.Count > 0)
            {
                foreach (var gc in Model.GiftCards)
                {
                    <tr class="giftcard-summary">
                        <td class="cart-total-left">
                            <label>@T("ShoppingCart.Totals.GiftCardInfo"):</label>
                            <span>@T("ShoppingCart.Totals.GiftCardInfo.Code", gc.CouponCode)</span>
                            @if (Model.IsEditable)
                            {
                                //little hack here with empty "value" element
                                <input type="submit" name="removegiftcard-@gc.Id" value=" " title="@T("Common.Remove")" class="remove-gift-card-button" />
                            }
                            <span class="giftcard-remaining">@string.Format(T("ShoppingCart.Totals.GiftCardInfo.Remaining").Text, gc.Remaining)</span>
                        </td>
                        <td class="cart-total-right">
                            <span class="value-summary">@gc.Amount</span>
                        </td>
                    </tr>
                }
            }
            @if (Model.RedeemedRewardPoints > 0)
            {
                <tr class="reward-points">
                    <td class="cart-total-left">
                        <label>@string.Format(T("ShoppingCart.Totals.RewardPoints").Text, Model.RedeemedRewardPoints):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary">@Model.RedeemedRewardPointsAmount</span>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="2"><hr /></td>
            </tr>
            <tr class="">
                <td class="cart-total-left">
                    <label>@T("ShoppingCart.Totals.OrderTotal"):</label>
                </td>
                <td class="cart-total-right">
                    @if (!string.IsNullOrEmpty(Model.OrderTotal))
                    {


                        decimal numTotal = 0;



                        decimal truncatedNumTotal = Math.Truncate(numTotal * 100) / 100; // truncate to two decimal places
                        string OrderTotal = truncatedNumTotal.ToString();
                        <span class="value-summary total" id="totalCheckout">@Model.OrderTotal</span>
                    }
                    else
                    {
                        <span>@T("ShoppingCart.Totals.CalculatedDuringCheckout")</span>
                    }
                </td>
            </tr>
            @if (Model.WillEarnRewardPoints > 0)
            {
                <tr class="earn-reward-points">
                    <td class="cart-total-left">
                        <label>@T("ShoppingCart.Totals.RewardPoints.WillEarn"):</label>
                    </td>
                    <td class="cart-total-right">
                        <span class="value-summary">@string.Format(T("ShoppingCart.Totals.RewardPoints.WillEarn.Point").Text, Model.WillEarnRewardPoints)</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    /*
        var totalModel = document.getElementById("O_SubTotal").innerHTML;

        var valueSubtotalInfo = document.getElementById("O_SubTotal").innerHTML;
        const numero2 = parseFloat(valueSubtotalInfo).toFixed(2);
        const formateador = new Intl.NumberFormat('en-EN');
        const numeroFormateado = formateador.format(numero2);
        const formattedValueTotalInfo = numeroFormateado.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })


        var patron = /^\d+(\.\d+)?$/;
        var match = totalModel.match(patron);

        if (match) {
            var numDecimales = match[1] ? match[1].length - 1 : 0;
            if (numDecimales == 0) {
                document.getElementById("O_SubTotal").innerHTML = "";
                document.getElementById("O_SubTotal").innerHTML = numeroFormateado + ".00";


            } else {
                if (numDecimales == 1) {
                    document.getElementById("O_SubTotal").innerHTML = "";
                    document.getElementById("O_SubTotal").innerHTML = numeroFormateado + "0";

                } else {
                    if (numDecimales > 1) {
                        var numDecimales2 = match[1] ? match[1].length - 1 : 0;
                        if (numDecimales2 == 0) {
                            document.getElementById("O_SubTotal").innerHTML = "";
                            document.getElementById("O_SubTotal").innerHTML = formattedValueTotalInfo + ".00";

                        } else {
                            if (numDecimales2 == 1) {
                                document.getElementById("O_SubTotal").innerHTML = "";
                                document.getElementById("O_SubTotal").innerHTML = formattedValueTotalInfo + "0";

                            } else {
                                if (numDecimales2 > 2) {
                                    document.getElementById("O_SubTotal").innerHTML = "";
                                    document.getElementById("O_SubTotal").innerHTML = formattedValueTotalInfo;
                                }
                            }
                        }

                    } else {
                        document.getElementById("O_SubTotal").innerHTML = "";
                        document.getElementById("O_SubTotal").innerHTML = numeroFormateado;
                    }
                }

            }



        }


        const valueTotalCheckout = document.getElementById("totalCheckout").innerHTML;;
        const formattedValueTotal = parseFloat(valueTotalCheckout).toFixed(2);
        const numeroTotalCheckout = formattedValueTotal;
        const formateadorTotal = new Intl.NumberFormat('en-EN');
        const numeroFormateadoTotal = formateadorTotal.format(numeroTotalCheckout);

        var match2 = totalModel.match(patron);

        if (match2) {
            var numDecimales2 = match2[1] ? match2[1].length - 1 : 0;
            if (numDecimales2 == 0) {
                document.getElementById("totalCheckout").innerHTML = "";
                document.getElementById("totalCheckout").innerHTML = numeroFormateadoTotal + ".00";


            } else {
                if (numDecimales2 == 1) {
                    document.getElementById("totalCheckout").innerHTML = "";
                    document.getElementById("totalCheckout").innerHTML = numeroFormateadoTotal + "0";

                } else {
                    document.getElementById("totalCheckout").innerHTML = "";
                    document.getElementById("totalCheckout").innerHTML = numeroFormateadoTotal;
                }
            }
            document.getElementById("totalCheckout").innerHTML = "";
            document.getElementById("totalCheckout").innerHTML = numeroFormateadoTotal;

        }

        const valueTotalCheckout2 = document.getElementById("totalCheckout").innerHTML;;
        const formattedValueTotalCheckout2 = parseFloat(valueTotalCheckout2).toFixed(2);
        const numeroTotalCheckout2 = formattedValueTotalCheckout2;
        const formateadorTotalCheckout2 = new Intl.NumberFormat('en-EN');
        const numeroFormateadoTotalCheckout2 = formateadorTotal.format(numeroTotalCheckout2);

        const formattedValueTotalInfoCheckout2 = numeroFormateadoTotalCheckout2.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ".00"

        document.getElementById("totalCheckout").innerHTML = "";
        document.getElementById("totalCheckout").innerHTML = numeroFormateadoTotalCheckout2;*/
</script>
