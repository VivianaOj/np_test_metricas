@model SearchBoxModel
@using System.Text.Encodings.Web

@{
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.InstantSearch/Themes/DefaultClean/Content/InstantSearch.css");
}

<form asp-route="ProductSearch" method="get" id="small-search-box-form">
    @Html.AntiForgeryToken()
    <input type="text" class="search-box-text" id="small-searchterms" style="height:1.8rem" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")" aria-label="@T("Search.SearchBox.Text.Label")" />
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton })
    <button type="submit" id="boton" name="Search" class="button-1 search-box-button"><i class="nn- nn-search footer-icon-size"></i></button>

    @if (Model.SearchTermMinimumLength > 0)
    {
        <script asp-location="Footer">

            $("#small-searchterms").keyup(function(e) {
                var code = (e.keyCode ? e.keyCode : e.which);
                console.log(code);
                console.log($('.instantSearchResourceElement').val());
                $('.instantSearchResourceElement').val($("#small-searchterms").val());
                $('.instantSearchResourceElement').css({ "width": "0px",  "margin": "0px", "padding": "0px" });
                $('.instantSearchResourceElement').attr('type', 'text');
                if(code==13){
                    if ($("#small-searchterms").val() == "") {
                        alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                        $('.instantSearchResourceElement').focus();
                        event.preventDefault();
                    }
                    $('.instantSearchResourceElement').focus();
                    $("#boton").trigger("click");
                }
            });
        </script>
    }
    @if (Model.AutoCompleteEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function() {
                var showLinkToResultSearch;
                var searchText;
                $('#small-searchterms').autocomplete({
                        delay: 1500,
                        minLength: @(Model.SearchTermMinimumLength.ToString()),
                        source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                        appendTo: '.search-box',
                        select: function(event, ui) {
                            $("#small-searchterms").val(ui.item.label);
                            //setLocation(ui.item.producturl);
                            return false;
                    },
                    //append link to the end of list
                    open: function(event, ui) {
                        //display link to search page
                        if (showLinkToResultSearch) {
                            searchText = document.getElementById("small-searchterms").value;
                            $(".ui-autocomplete").append("<li class=\"ui-menu-item\" role=\"presentation\"><a href=\"/search?q=" + searchText + "\">@T("Search.SearchBox.SearchPageLink")</a></li>");
                        }
                        $("#small-searchterms").focus();
                    },response: function (event, ui) {
                           if (!ui.content.length) {
                               var noResult = { value: "", label: "No found result" };
                               ui.content.push(noResult);
                           }
                           $("#small-searchterms").focus();
                       }
                })
                .data("ui-autocomplete")._renderItem = function(ul, item) {
                    var t = item.label;
                    showLinkToResultSearch = item.showlinktoresultsearch;
                    //html encode
                    t = htmlEncode(t);
                    $("#small-searchterms").focus();
                   return $("<li></li>")
                               .data("item.autocomplete", item)
                               .append("<div class='instant-search-item'><a>"
                                   + "<div class='img-block'>"
                                   + "@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" +    item.productpictureurl + \"' >"):null )</div>"
                                   + "<div class='detail'>"
                                   + "<div class='title'>" + t + "</div>"
                                   //+"<div class='description'>" + t + "</div>"
                                   //+ "<div class='price'>" + t + "</div>"
                                   + "</div>"
                                   + "</a></div>").appendTo(ul);
                };
                $("#small-searchterms").focus();
            });
        </script>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox })
</form>