@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo

@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject CommonSettings commonSettings
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }
    var ButtonOldPrice = "";
    if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice)) { ButtonOldPrice = "ButtonOldPrice"; }
    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    var url_section = ((Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol)Url.ActionContext.HttpContext.Features).Path.ToString();

}
<input type="hidden" id="brandedItems_@Model.Id"name="brandedItems_@Model.Id" value="@Model.Custitem_branded_variants" />

@if (url_section != "/search")
{
    <div class="product-item-rounded div-product-list-search-version-desktop" style="height: 100%; background: #FFFFFF " data-productid="@Model.Id">
        <div class="woplr row p-4 div-category-version-mobile">
            <div class="col-md-12 text-center">
                <div class="div-img-category-version-mobile" style="height:20rem">
                    <img class="img-category-version-mobile img-fluid max-h-75 border-rounded-image-8" onclick="window.location.href='@Url.RouteUrl("Product", new { SeName = Model.SeName })'" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" style="cursor:pointer" />

                    @if (Model.OutStock)
                    {
                        <div class="message-error" style="font-weight:900;font-size: 0.8rem !important;"><ul>@T("OutStock")</ul></div>

                    }
                </div>
            </div>
            <div class="img-title-description-version-mobile wop col-md-12 mt-3" style="height: 10rem;">
                <div class="product-title-breadcrumb displaynone">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.category</a>
                </div>
                <h2 class="product-title-product-box">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                </h2>

                <div class="description" style="overflow-y: hidden; overflow-x: hidden; text-align: left; margin-top: 30px;">
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        @Model.Sku
                        <br />
                    }
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            @Html.Raw(Model.ShortDescription?.Length > 140 ? Model.ShortDescription?.Substring(0, 139) + "..." : Model.ShortDescription)
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                @Html.Raw(Model.FullDescription?.Length > 140 ? Model.FullDescription?.Substring(0, 139) + "..." : Model.FullDescription)

                            }
                        }
                    </a>
                </div>

            </div>

        </div>
        <div class="div-category-price-version-mobile woplr row p-4">
            <div class="wop col-md-6" style="height: 60px;">
                <div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                    <div class="prices" style="width: 100% !important;">
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Model.ProductPrice.OldPrice <br /></span>
                        }
                        <span class="price actual-price">@Model.ProductPrice.Price</span>
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv">
                                @Model.ProductPrice.BasePricePAngV
                            </div>
                        }
                    </div>

                </div>
            </div>
            <div class="col-lg-6" style="position: absolute;right: 25px;bottom: 6%;">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                <div class="buttons @ButtonOldPrice" style="text-align: right;">
                    @*<input type="button" value="@T("Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />*@
                    @*<img src="~/Themes/DefaultClean/Content/images/magnifying-glass.png" style="border-radius:5px;cursor:pointer;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })');return false;" />*@
                    @if (Model.OutStock)
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                    }
                    else
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton)
                    {
                        <input type="button" title="@T("SevenSpikes.QuickView.Admin.Settings.QuickViewButtonTitle")" class="button-2 add-to-compare-list-button d-none" />
                    }
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {
                        @*<img src="~/Themes/DefaultClean/Content/images/wishlist-icon.png" style="border-radius: 5px; cursor: pointer; " onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />*@
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToWish" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <img class="ml-2 btn-addtocart-card-desktop" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <input type="button" value="@T(" ShoppingCart.AddToWishlist")" title="@T(" ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button d-none" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            </div>
        </div>
    </div>
}
else
{
    <div class="section-list-products-search-mobile product-item-rounded div-product-list-search-version-mobile" style="border: 0px; border-bottom: 1px solid #b0bec5 !important; height: 100%; background: #FFFFFF " data-productid="@Model.Id">
        <div class="woplr row p-4 div-category-version-mobile">
            <div class="col-4 col-md-12 text-center">
                <div class="div-img-category-version-mobile" style="height: 8rem !important;">
                    <img class="img-category-version-mobile img-fluid max-h-75 border-rounded-image-8" onclick="window.location.href='@Url.RouteUrl("Product", new { SeName = Model.SeName })'" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" style="cursor:pointer; height: auto !important;" />

                    @if (Model.OutStock)
                    {
                        <div class="message-error" style="font-weight:900;font-size: 0.8rem !important;"><ul>@T("OutStock")</ul></div>

                    }
                </div>
            </div>
            <div class="col-8 img-title-description-version-mobile wop col-md-12 mt-3" style="height: 10rem;">
                <div class="product-title-breadcrumb displaynone">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.category</a>
                </div>
                <h2 class="product-title-product-box">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                </h2>

                <div class="description" style="overflow-y: hidden; overflow-x: hidden; text-align: left; margin-top: 30px;">
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        @Model.Sku
                        <br />
                    }
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            @Html.Raw(Model.ShortDescription?.Length > 140 ? Model.ShortDescription?.Substring(0, 139) + "..." : Model.ShortDescription)
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                @Html.Raw(Model.FullDescription?.Length > 140 ? Model.FullDescription?.Substring(0, 139) + "..." : Model.FullDescription)

                            }
                        }
                    </a>
                </div>

            </div>

        </div>
        <div class="div-category-price-version-mobile woplr row p-4">
            <div class="col-6 wop col-md-6" style="height: 60px;">
                <div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                    <div class="prices" style="width: 100% !important; padding-top: 15px !important;">
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Model.ProductPrice.OldPrice <br /></span>
                        }
                        <span class="price actual-price">@Model.ProductPrice.Price</span>
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv">
                                @Model.ProductPrice.BasePricePAngV
                            </div>
                        }
                    </div>

                </div>
            </div>
            <div class="col-6 col-lg-6">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                <div class="buttons @ButtonOldPrice" style="text-align: right;">
                    @if (Model.OutStock)
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                    }
                    else
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton)
                    {
                        <input type="button" title="@T("SevenSpikes.QuickView.Admin.Settings.QuickViewButtonTitle")" class="button-2 add-to-compare-list-button d-none" />
                    }
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {

                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToWish" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <img class="ml-2 btn-addtocart-card-desktop" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <input type="button" value="@T(" ShoppingCart.AddToWishlist")" title="@T(" ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button d-none" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            </div>
        </div>
    </div>

    <div class="section-list-products-search-desktop product-item-rounded div-product-list-search-version-desktop" style="height: 100%; background: #FFFFFF " data-productid="@Model.Id">
        <div class="woplr row p-4 div-category-version-mobile">
            <div class="col-md-12 text-center">
                <div class="div-img-category-version-mobile" style="height:20rem">
                    <img class="img-category-version-mobile img-fluid max-h-75 border-rounded-image-8" onclick="window.location.href='@Url.RouteUrl("Product", new { SeName = Model.SeName })'" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" style="cursor:pointer" />

                    @if (Model.OutStock)
                    {
                        <div class="message-error" style="font-weight:900;font-size: 0.8rem !important;"><ul>@T("OutStock")</ul></div>

                    }
                </div>
            </div>
            <div class="img-title-description-version-mobile wop col-md-12 mt-3" style="height: 10rem;">
                <div class="product-title-breadcrumb displaynone">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.category</a>
                </div>
                <h2 class="product-title-product-box">
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">@Model.Name</a>
                </h2>

                <div class="description" style="overflow-y: hidden; overflow-x: hidden; text-align: left; margin-top: 30px;">
                    @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
                    {
                        @Model.Sku
                        <br />
                    }
                    <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})">
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            @Html.Raw(Model.ShortDescription?.Length > 140 ? Model.ShortDescription?.Substring(0, 139) + "..." : Model.ShortDescription)
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                @Html.Raw(Model.FullDescription?.Length > 140 ? Model.FullDescription?.Substring(0, 139) + "..." : Model.FullDescription)

                            }
                        }
                    </a>
                </div>

            </div>

        </div>
        <div class="div-category-price-version-mobile woplr row p-4">
            <div class="wop col-md-6" style="height: 60px;">
                <div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                    <div class="prices" style="width: 100% !important;">
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Model.ProductPrice.OldPrice <br /></span>
                        }
                        <span class="price actual-price">@Model.ProductPrice.Price</span>
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv">
                                @Model.ProductPrice.BasePricePAngV
                            </div>
                        }
                    </div>

                </div>
            </div>
            <div class="col-lg-6" style="position: absolute;right: 25px;bottom: 6%;">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                <div class="buttons @ButtonOldPrice" style="text-align: right;">


                    @if (Model.OutStock)
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')" />
                    }
                    else
                    {
                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToCart" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                        <img class="btn-category-version-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                    }
                    @if (!Model.ProductPrice.DisableAddToCompareListButton)
                    {
                        <input type="button" title="@T("SevenSpikes.QuickView.Admin.Settings.QuickViewButtonTitle")" class="button-2 add-to-compare-list-button d-none" />
                    }
                    @if (!Model.ProductPrice.DisableWishlistButton)
                    {

                        <img class="btn-category-version-mobile btn-addtocart-card-mobile" data-toggle="modal" data-target="#modalAddToWish" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <img class="ml-2 btn-addtocart-card-desktop" src="~/images/favorite_border.svg" style="border-radius:5px;cursor:pointer;width: 30px;margin-top: 10px;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                        <input type="button" value="@T(" ShoppingCart.AddToWishlist")" title="@T(" ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button d-none" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    }
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            </div>
        </div>
    </div>
}


