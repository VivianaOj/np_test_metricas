@{
    Layout = "_Root";
    string pageRoute = Url.ActionContext.RouteData.Values["action"].ToString();

}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    var url_section = ((Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol)Url.ActionContext.HttpContext.Features).Path.ToString();
}
@*@if (IsSectionDefined("Breadcrumb"))
    {
        @section Breadcrumb {
            @RenderSection("Breadcrumb")
        }
    }*@
@if (IsSectionDefined("Breadcrumb"))
{
    <div class="padding-breadcrumb-general-mobile row d-flex justify-content-center colorGeneralBackgroundGray pb-3 title-cart-version-mobile">
        <div class="wop col-12 col-sm-11 col-md-11 col-lg-11">

            @RenderSection("Breadcrumb")

        </div>
    </div>
}

@*

*@
<div class="row d-flex justify-content-center mt-5 div-order-mobile">
    <!--
    <div class="col-12 filters-zone-mobile">
        <div class="row border-bottom-filters-zone-mobile">
            <div class="wop col-6">
                <img src="/images/filters_mobile.png"/>
                <span style="cursor: pointer;" onclick="menuFilters(); return false;"><b>Filters</b></span>
            </div>
            <div class="wop col-6">
                <img src="/images/arrow_left_mobile.png" style="float:right; cursor: pointer;" />
            </div>
        </div>
    </div>
    -->
    <div class="col-sm-11 col-md-11 col-lg-11 sub-div-order-mobile">
        <a href="#" onclick="filterToggle(); return false;" class="btn btn-primary btn-filters-version-mobile"><i class="fa fa-sort-amount-desc"></i> Show filters</a>
        <div class="row" id="rowCatalogsSelectorFilter">
            <div class="col-lg-3 my-auto">
                <div id="divFiltersCatalogSelectors">
                    <div class="filter filter_@pageRoute" style="cursor:pointer">
                        <div class="filter_info">
                            <span class="filter1"></span>
                        </div>
                        <span class="filtertext">@T("search.filter")</span>
                    </div>
                </div>
            </div>
            <div class="col-lg-9" id="container_div_CatalogSelectors">
            </div>
        </div>
        <div class="row mb-5" id="rowGeneralColumnsTwo">
            <div class="col-lg-3" id="divContainerRealFilters">
                <div class="">
                    <div class="infoFilters">
                        @if (IsSectionDefined("left"))
                        {
                            @RenderSection("left")
                        }
                        else
                        {

                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
                            @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                            @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                            @await Component.InvokeAsync("VendorNavigation")
                            @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })

                            @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-9" id="divContainerRealContainer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
                @RenderBody()
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
            </div>
        </div>
    </div>
</div>
<script>
    var isClosed = false;
    function CloseFilters() {
        isClosed = true;
        $('#divContainerRealFilters').fadeOut();
        $('.product-box-more-info').removeClass('col-lg-4');
        $('.product-box-more-info').addClass('col-lg-3');

        $('#divContainerRealContainer').removeClass('col-lg-9');
        $('#divContainerRealContainer').addClass('col-lg-12');
    }

    function OpenFilters() {
        isClosed = false;
        $('#divContainerRealFilters').fadeIn();
        $('.product-box-more-info').removeClass('col-lg-3');
        $('.product-box-more-info').addClass('col-lg-4');

        $('#divContainerRealContainer').removeClass('col-lg-12');
        $('#divContainerRealContainer').addClass('col-lg-9');
    }

    $('#divFiltersCatalogSelectors').on('click', function () {
        if (!isClosed) {
            CloseFilters();
        } else {
            OpenFilters();
        }
    });


    if ($('#div_CatalogSelectors'))
        $('#div_CatalogSelectors').appendTo('#container_div_CatalogSelectors');

    function menuFilters() {
        $("#divContainerRealFilters").toggle("slow");
    }

</script>
