@{
    Layout = "_ColumnsOne";

    //page class
    Html.AppendPageCssClassParts("html-home-page");
}
<div class="page home-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageTop })
        @await Component.InvokeAsync("TopicBlock", new { systemName = "HomepageText" })

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })
        @await Component.InvokeAsync("HomepageProducts")

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeBestSellers })
        @await Component.InvokeAsync("HomepageBestSellers")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeCategories })
        @await Component.InvokeAsync("HomepageCategories")

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeNews })
        @await Component.InvokeAsync("HomepageNews")

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforePoll })
        @await Component.InvokeAsync("HomepagePolls")

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBottom })
    </div>
</div>


<!-- Button to open/close chat -->
<!--<div class="chat-button">
    <img src="https://cdn-icons-png.flaticon.com/512/8943/8943377.png" alt="Chat Icon" />
</div>-->

<!-- Chat container -->
<!--<div class="chat-container">
    <div class="header-chat">
        <div class="header-back-chat">
            X
        </div>
    </div>
    <div class="chat-log"></div>
    <input class="chat-input" type="text" placeholder="Escribe un mensaje..." />
</div>
<script>
    // Toggle chat container visibility
    document.querySelector('.chat-button').onclick = function () {
        var chatContainer = document.querySelector('.chat-container');
        if (chatContainer.style.display === 'none') {
            chatContainer.style.display = 'block';
            // Send a welcome message when chat opens
            sendWelcomeMessage();
        } else {
            chatContainer.style.display = 'none';
        }
    };

    // Send a welcome message to the Rasa server and display response
    function sendWelcomeMessage() {
        var chatLog = document.querySelector('.chat-log');

        fetch('http://localhost:5005/webhooks/rest/webhook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sender: "user1",
                message: "Hola" // Sending a default welcome message command
            })
        })
            .then(response => response.json())
            .then(data => {
                data.forEach(entry => {
                    chatLog.innerHTML += '<div class="tawk-avatar-image"><img src="https://tawk.link/avatar/male-11.svg" alt="Agent profile image"></div><div class="bot-message">' + entry.text + '</div>';
                });
            });
    }

    // Send message to the Rasa server and display response
    document.querySelector('.chat-input').addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    function sendMessage() {
        var message = document.querySelector('.chat-input').value;
        var chatLog = document.querySelector('.chat-log');

        chatLog.innerHTML += '<div class="user-message">' + message + '</div>';
        document.querySelector('.chat-input').value = '';

        fetch('http://localhost:5005/webhooks/rest/webhook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                sender: "user1",
                message: message
            })
        })
            .then(response => response.json())
            .then(data => {
                data.forEach(entry => {
                    chatLog.innerHTML += '<div class="bot-message">' + entry.text + '</div>';
                });
            });
    }
</script>

<style>
    .header-chat {
        height: 37px;
        background: #1dc4ff !important;
        border-radius: 8px;
    }
    .header-back-chat {
        padding-right: 22px;
        padding-top: 7px;
        color: white;
        font-weight: bold;
        float: right;
    }

        /* Button to open/close chat */
        .chat-button {
            position: fixed;
            bottom: 14%;
            right: 20px;
            width: 50px;
            height: 50px;
            cursor: pointer;
            background-color: #007bff;
            border: none;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
        }

        .chat-button img {
            width: 40px;
            height: 40px;
        }

    /* Chat container */
    .chat-container {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 300px;
        height: 400px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        display: none;
        z-index: 1000;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    /* Chat log */
    .chat-log {
        height: calc(100% - 50px);
        overflow-y: auto;
        padding: 10px;
        box-sizing: border-box;
    }

    /* User and bot messages */
    .user-message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        background-color: #e1f5fe;
        font-size: 12px;
        width: 83%;
        float: right;
    }

    .bot-message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        background-color: #f1f1f1;
        width: 83%;
        float: right;
        background: #e6aa1a !important;
        color: #ffffff !important;
        font: 400 16px Lato, sans-serif !important;
    }

    /* Chat input */
    .chat-input {
        position: absolute;
        bottom: 0;
        width: 100%;
        border-top: 1px solid #ccc;
        padding: 10px;
        box-sizing: border-box;
    }

    .tawk-avatar-image {
        width: 44px;
        float: left;
    }
</style>-->

<style>
    .reachLink {
        margin-top: 350px;
    }
</style>