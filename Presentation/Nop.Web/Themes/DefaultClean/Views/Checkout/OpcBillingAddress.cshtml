@model CheckoutBillingAddressModel
@using Nop.Core
@inject IWorkContext workContext

@{
    var method = "";


}
<div class="checkout-data">
    @functions{
        public string Shorten(string estate)
        {
            string text = estate.Length > 147 ? estate.Substring(0, 147) + "..." : estate;
            return text;
        }
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })

    <input id="len_address" type="hidden" value="@Model.ExistingAddresses.Count()" />



    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address" style="margin: 0px;">
            <div class="row">
                <div class="col-12">
                    <div class="row justify-content-center">
                        <div class="col-auto d-flex">
                            <input asp-for="ShipToSameAddress" class="my-auto" />
                        </div>
                        <div class="col-auto d-flex">
                            <label class="messageConfirmation my-auto" asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.BillingNewAddress.IsGuest)
    {
        <input type="hidden" id="GuestCheckout" name="GuestCheckout" value="1" />

    }
    @if (Model.ExistingAddresses.Count > 0)
    {

        <div class="row mt-3">
            <div class="col-lg-8 billingAddress">
                <div class="section select-billing-address">
                    <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
                    @if (Model.InvalidExistingAddresses.Count > 0)
                    {
                        <label class="min-amount-warning">
                            @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                        </label>
                    }
                    <div>

                        @if (Model.BillingNewAddress.IsGuest)
                        {
                            method = "Billing.resetBillingForm();Billing.newAddress(!this.value)";
                        }
                        else
                        {
                            method = "Billing.selectAddress(this.value)";
                        }


                        <select name="billing_address_id" id="billing-address-select" style="width:100% !important; display: none;" class="address-select" title="" onchange="@method">

                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2;
                                    }

                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += ", " + address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode;
                                    }

                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {
                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";
                                    }
                                    

                                    //how should we render "FormattedCustomAddressAttributes" here?
                                    <option title="@addressLine" value="@(address.Id)">@Shorten(addressLine)</option>
                                }

                            }

                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (!address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2;
                                    }

                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += ", " + address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode;
                                    }
                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {
                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";

                                    }


                                    <option title="@addressLine" value="@(address.Id)">@Shorten(addressLine)</option>
                                }

                            }

                            @if (Model.ExistingAddresses.Count() < 10)
                            {
                                <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress").Text</option>
                            }
                        </select>


                        <div class="div-select-select">
                            @{
                                bool first = true;

                                if (Model.ExistingAddresses.Count > 0)
                                {
                                    <input name="select-billing-address" id="select-billing-address" value="@Model.ExistingAddresses.First().Id" type="hidden" />
                                }
                                else
                                {
                                    <input name="select-billing-address" id="select-billing-address" value="0" type="hidden" />
                                }
                            }

                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine +=  address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2 ;
                                    }


                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine +=   address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode  ;
                                    }
                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {
                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";

                                    }


                                    string str = addressLine;
                                    string[] charsToRemove = new string[] { "@",   ".", ";", "'", "\n" };
                                    foreach (var c in charsToRemove)
                                    {
                                        str = str.Replace(c, string.Empty);
                                    }

                                    if (Model.BillingNewAddress.IsGuest)
                                    {
                                        method = "Billing.resetBillingForm();Billing.newAddress(!" + address.Id + ")";
                                    }
                                    else
                                    {
                                        method = "Billing.selectAddress(" + address.Id + ")";
                                    }

                                    if (first)
                                    {
                                        <a onclick="showOptions('select-01');" class="option-selected" id="option-seleted-01">@Html.Raw(str)</a>
                                        <img class="img-billing-address" src="~/images/chevrone-down-2.png" style="float: right; width: 15px; height: 15px; position: absolute; top: 55px; left: 96%;" onclick="showOptions('select-01');" />
                                        first = false;
                                    }

                                    break;
                                }
                            }

                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (!address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2;
                                    }

                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += ", " + address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode;
                                    }
                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {
                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";

                                    }

                                    string str = addressLine;
                                    string[] charsToRemove = new string[] { "@",   ".", ";", "'", "\n" };
                                    foreach (var c in charsToRemove)
                                    {
                                        str = str.Replace(c, string.Empty);
                                    }

                                    if (Model.BillingNewAddress.IsGuest)
                                    {
                                        method = "Billing.resetBillingForm();Billing.newAddress(!" + address.Id + ")";
                                    }
                                    else
                                    {
                                        method = "Billing.selectAddress(" + address.Id + ")";
                                    }

                                    if (first)
                                    {
                        <a onclick="showOptions('select-01');" class="option-selected" id="option-seleted-01">@Html.Raw(str)</a>
                                        <img class="img-billing-address" src="~/images/chevrone-down-2.png" style="float: right; width: 15px; height: 15px; position: absolute; top: 55px; left: 96%;" onclick="showOptions('select-01');" />
                                        first = false;
                                    }

                                    break;
                                }
                            }


                        <div class="div-select-options" id="select-01" style="display: none;">
                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += "<span>" + address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2+ "</span>";
                                    }else
                                    {
                                        addressLine += "</span>";

                                    }

                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += "<span>" + address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += " " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode+"</span>" ;
                                    }

                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {
                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";

                                    }


                                    string str = addressLine;
                                    string[] charsToRemove = new string[] { "@",  ".", ";", "'", "\n" };
                                    foreach (var c in charsToRemove)
                                    {
                                        str = str.Replace(c, string.Empty);
                                    }

                                    if (Model.BillingNewAddress.IsGuest)
                                    {
                                        method = "Billing.resetBillingForm();Billing.newAddress(!" + address.Id + ")";
                                    }
                                    else
                                    {
                                        method = "Billing.selectAddress(" + address.Id + ")";
                                    }

                                    <!--<div class="div-select-option"><a onclick="selectItem('option-seleted-01', '1', '@str', 'select-01', '@(address.Id)'); @method">@Html.Raw(str)</a></div>-->
                                    <div class="div-select-option"><a onclick="selectItem('@(address.Id)','select-01', 'option-seleted-01', '@str', 'billing-address-select'); @method">@Html.Raw(str)</a></div>

                                }

                            }
                            @foreach (var address in Model.ExistingAddresses)
                            {
                                if (!address.IsBilling)
                                {
                                    var addressLine = "";

                                    if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                    {
                                        addressLine += "<span>"+address.Address1;
                                    }
                                    if (address.StreetAddress2Enabled && !string.IsNullOrWhiteSpace(address.Address2))
                                    {
                                        addressLine += ", " + address.Address2 + "</span>";
                                    }
                                    else
                                    {
                                        addressLine += "</span>";
                                    }

                                    if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                    {
                                        addressLine += "<span>" + address.City;
                                    }
                                    if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                    {
                                        addressLine += ", " + address.County;
                                    }
                                    if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                    {
                                        addressLine += ", " + address.StateProvinceName;
                                    }
                                    if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                    {
                                        addressLine += " " + address.ZipPostalCode+ "</span>";
                                    }

                                    if (!string.IsNullOrEmpty(address.DeliveryRouteName))
                                    {

                                        addressLine += " <span class='approvedNN'>Approved for N&N Delivery</span>";

                                    }


                                    string str = addressLine;
                                    string[] charsToRemove = new string[] { "@", ".", ";", "'", "\n" };
                                    foreach (var c in charsToRemove)
                                    {
                                        str = str.Replace(c, string.Empty);
                                    }

                                    if (Model.BillingNewAddress.IsGuest)
                                    {
                                        method = "Billing.resetBillingForm();Billing.newAddress(!" + address.Id + ")";
                                    }
                                    else
                                    {
                                        method = "Billing.selectAddress(" + address.Id + ")";
                                    }

                                    <!--<div class="div-select-option"><a onclick="selectItem('option-seleted-01', '1', '@str', 'select-01', '@(address.Id)'); @method">@str</a></div>-->
                                    <div class="div-select-option"><a onclick="selectItem('@(address.Id)','select-01', 'option-seleted-01', '@str', 'billing-address-select'); @method">@Html.Raw(str)</a></div>
                                }
                            }

                            @if (Model.ExistingAddresses.Count() < 10)
                            {
                               <br>
                                <!--<div class="div-select-option"><a onclick="selectItem('option-seleted-01', '1', '@T("Checkout.NewAddress").Text', 'select-01', '0'); Billing.selectAddress(0);">@T("Checkout.NewAddress").Text</a></div>-->
                                <div class="div-select-option"><a style="font-weight: 600" onclick="selectItem('','select-01', 'option-seleted-01', '@T("Checkout.NewAddress").Text', 'billing-address-select'); Billing.selectAddress(0);">+ @T("Checkout.NewAddress").Text</a></div>

                            }
                        </div>
                        </div>

                        @if (!Model.BillingNewAddress.IsGuest)
                        {
                            <input type="hidden" id="CustomerCheckout" name="CustomerCheckout" value="1" />
                            <script asp-location="Footer">
                                $(function () {
                                    if ($("#billing-address-select").length > 0) {
                                        Billing.selectAddress($('#billing-address-select').val());
                                    };
                                });
                            </script>
                        }

                    </div>
                </div>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })


    <div class="section new-billing-address mt-5" id="billing-new-address-form">

        @*@if (!Model.BillingNewAddress.AccountCustomer)
            {*@

        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";

                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
        @*}*@
    </div>


    <div class="section new-billing-address mt-5" style="margin-bottom:0px ; margin-top: 30px;">
        <div id="form-select-billing">
        </div>
    </div>

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })


    @{ if (Model.BillingNewAddress.AccountCustomer)
        {
            <div class="section select-billing-address">
                <div class="col-lg-8 billingAddress" style=" padding: 0;">
                    <div class="col-4 col-md-4 ">
                        <div class="form-group">
                            <label class="address-box-firs-name">@T("PoNumber"): </label>
                            @if (Model.BillingNewAddress.ValidPONumber)
                            {
                                <input onchange="ValidateField()" asp-for="PoNumber" class="form-control address-box-form-input" maxlength="50" />
                                <span id="PoNumberValidate" class="field-validation-error">PO Number is required</span>
                                <span id="PoNumberValidatePo" class="field-validation-error displaynone">PO Number is required</span>

                            }
                            else
                            {
                                <input onchange="ValidateField()" asp-for="PoNumber" class="form-control address-box-form-input" maxlength="50" />
                                <span id="PoNumberValidatePo" class="field-validation-error displaynone">PO Number is required</span>

                            }
                        </div>
                        <div class="">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        }
    }

    <hr style="border-top: 1px solid #B0BEC5 ">
    <!-- Note: The address components in this sample are based on North American address format. You might need to adjust them for the locations relevant to your app. For more information, see  https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
        -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <script type="module" src="~/js/index.js"></script>


    <!--
    The `defer` attribute causes the callback to execute after the full HTML
    document has been parsed. For non-blocking uses, avoiding race conditions,
    and consistent behavior across browsers, consider loading using Promises.
    See https://developers.google.com/maps/documentation/javascript/load-maps-js-api
    for more information.
    -->

    <script type="text/javascript" async defer>
        if (document.isLoadingGoogleMapsApi === undefined) {
            document.isLoadingGoogleMapsApi = true;
            var script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyDlgrDpNqxQrOjZJ-EDoXwrievsyxqv-R0&callback=initAutocomplete&libraries=places&v=weekly';
            script.type = 'text/javascript';
            script.defer = true;
            document.getElementsByTagName('head')[0].appendChild(script);
        } else {
            initAutocomplete()
        }
    </script>


</div>

<style>
       /*
    * Always set the map height explicitly to define the size of the div element
    * that contains the map.
    */
       #map {
           height: 100%;
       }

       /*
    * Optional: Makes the sample page fill the window.
    */

       .title {
           width: 100%;
           margin-block-end: 0;
           font-weight: 500;
       }

       .note {
           width: 100%;
           margin-block-start: 0;
       }

       .form-label {
           width: 100%;
           padding: 0.5em;
       }

       .full-field {
           flex: 400px;
           margin: 15px 0;
       }

       .slim-field-left {
           flex: 1 150px;
           margin: 15px;
           margin-inline-start: 0;
       }

       .slim-field-right {
           flex: 1 150px;
           margin: 15px;
           margin-inline-end: 0;
       }
</style>

<script>
    function ValidateField() {
        $("#PoNumberValidate").addClass("displaynone");

    }
    function validateName() {

    }
    function validateLastName() {

    }
    function validateEmail() {
        var email = document.getElementById('BillingNewAddress_Email').value;
            var postData = {
                email: email,
            };
            addAntiForgeryToken(postData);

            $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("ValidEmailCustomer", "Checkout"))",
                    traditional: true,
                    data: postData,
                    success: function (data, textStatus, jqXHR) {
                        if (data.Result == true)
                        {
                           
                          
                             displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new {SystemName = "associatedcustomer" })',
                            '@T("admin.configuration.shipping.method.associatedcustomer")');


                              

                            setTimeout(function () {

                                var MessageAccountCustomer = document.getElementById('MessageAccountCustomer');

                                if (MessageAccountCustomer != null) {
                                    // Get the current text content
                                    var currentText = MessageAccountCustomer.textContent;

                                    // Replace the placeholder with the actual email
                                    var updatedMessage = currentText.replace(/{emailfieldhere}/g, email);

                                    // Update the element with the new text
                                    MessageAccountCustomer.textContent = updatedMessage;
                                }
                                var sendButton = document.getElementById('Login');
                                if (sendButton) {
                                    sendButton.addEventListener("click", function () { LoginValidRedirect(data.newAccount); }, false);
                                }

                                var sendButton_1 = document.getElementById('NoContinueCheckoutButton');
                                if (sendButton_1) {
                                    sendButton_1.addEventListener("click", function () { ContinueCheckout(); }, false);
                                }


                                if (data.newAccount == true) {

                                    var loginButton = document.getElementById("Login");
                                    loginButton.value = "Register";
                                }
                            }, 2000);


                        }

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(errorThrown);
                        closeButton.click();
                    }
          });


    }

    function LoginValidRedirect(Login) {
            if (Login == false) {
                    setLocation('@(Url.RouteUrl("Login"))');
            } else {
                setLocation('@(Url.RouteUrl("validateregister"))');
            }
    }
    function validateAddress1() {

    }

    function validateCity() {

    }


    function ValidateZipCode(sZip) {


    }

</script>
