@model CheckoutShippingAddressModel
@using System.Text
<div class="checkout-data">
    @if (Model.AllowPickupInStore && !Model.PickupInStoreOnly && Model.PickupPoints.Any())
    {
        <div class="section pickup-in-store">
            <p class="selector">
                <input asp-for="PickupInStore" onclick="Shipping.togglePickupInStore(this)" />
                <label asp-for="PickupInStore">@T("Checkout.PickupPoints")</label>
            </p>
            <p class="description">
                <i>@T("Checkout.PickupPoints.Description")</i>
            </p>
            <script>
                $(document).ready(function () {
                    Shipping.togglePickupInStore($('#@Html.IdFor(model => model.PickupInStore)'));
                });
            </script>
        </div>
    }
    @if (Model.AllowPickupInStore)
    {
        <div class="section pickup-points" id="pickup-points-form">
            @if (Model.PickupPoints.Any())
            {
                if (Model.PickupInStoreOnly)
                { 
                    <input type="hidden" asp-for="PickupInStore"/>
                }
                <div class="select-pickup-points">
                    @if (Model.PickupPoints.Count == 1)
                    {
                        var point = Model.PickupPoints.First();
                        <input name="pickup-points-id" id="pickup-points-id" type="hidden" value="@($"{point.Id}___{point.ProviderSystemName}")" />
                        <div class="single-pickup-point">
                            <ul>
                                <li class="single-pickup-point name">@point.Name</li>
                                <li class="single-pickup-point address">@($"{point.Address} {point.City} {point.County} {point.StateName} {point.CountryName}")</li>
                                @if (!string.IsNullOrEmpty(point.PickupFee))
                                {
                                    <li class="single-pickup-point fee">@point.PickupFee</li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <label for="pickup-points-select">@T("Checkout.PickupPoints.SelectPickupPoint")</label>
                        <select name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                            @foreach (var point in Model.PickupPoints)
                            {
                                var addressLine = new StringBuilder();
                                addressLine.Append(point.Name);
                                if (!string.IsNullOrEmpty(point.Address))
                                {
                                    addressLine.AppendFormat(", {0}", point.Address);
                                }
                                if (!string.IsNullOrEmpty(point.City))
                                {
                                    addressLine.AppendFormat(", {0}", point.City);
                                }
                                if (!string.IsNullOrEmpty(point.County))
                                {
                                    addressLine.AppendFormat(", {0}", point.County);
                                }
                                if (!string.IsNullOrEmpty(point.StateName))
                                {
                                    addressLine.AppendFormat(", {0}", point.StateName);
                                }
                                if (!string.IsNullOrEmpty(point.CountryName))
                                {
                                    addressLine.AppendFormat(", {0}", point.CountryName);
                                }
                                if (!string.IsNullOrEmpty(point.PickupFee))
                                {
                                    addressLine.AppendFormat(", {0}", point.PickupFee);
                                }
                                <option value="@($"{point.Id}___{point.ProviderSystemName}")">@(addressLine)</option>
                            }
                        </select>
                    }
                </div>
         
            }
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        </div>
    }
    @if (!Model.PickupInStoreOnly)
    {
        <div class="shipping-addresses" id="shipping-addresses-form">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressTop })
            @if (Model.ExistingAddresses.Count > 0)
            {
                <div class="section select-shipping-address">
                    <label for="shipping-address-select">@T("Checkout.SelectShippingAddressOrEnterNewOne")</label>
                    @if (Model.InvalidExistingAddresses.Count > 0)
                    {
                        <label class="min-amount-warning">
                            @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                        </label>
                    }
                    <div>
                        <select name="shipping_address_id" id="shipping-address-select" class="address-select"
                                title="" onchange="Shipping.newAddress(!this.value)">
                            @foreach (var address in Model.ExistingAddresses)
                            {
                                var addressLine = "";
                                //addressLine += address.FirstName;
                                //addressLine += " " + address.LastName;
                                if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                                {
                                    addressLine += address.Address1;
                                }
                                if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                                {
                                    addressLine += ", " + address.City;
                                }
                                if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                                {
                                    addressLine += ", " + address.County;
                                }
                                if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                                {
                                    addressLine += ", " + address.StateProvinceName;
                                }
                                if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                                {
                                    addressLine += " " + address.ZipPostalCode;
                                }
                                if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                                {
                                    addressLine += ", " + address.CountryName;
                                }
                                //how should we render "FormattedCustomAddressAttributes" here?
                                <option value="@(address.Id)">@(addressLine)</option>
                            }
                            <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                        </select>
                    </div>
                </div>
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressMiddle })
            <div class="section new-shipping-address" id="shipping-new-address-form">
                <div class="enter-address">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    @{
                        var dataDictAddress = new ViewDataDictionary(ViewData);
                        dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                        @await Html.PartialAsync("_CreateOrUpdateAddress", Model.ShippingNewAddress, dataDictAddress)
                    }
                </div>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressBottom })
        </div>
    }
</div>