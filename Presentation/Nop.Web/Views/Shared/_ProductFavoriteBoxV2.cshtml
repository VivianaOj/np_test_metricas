@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item-rounded h-100" data-productid="@Model.Id">
    <div class="row p-4 text-center">
        <div class="col-md-12" style="height:20rem">
            <img class="img-fluid max-h-75 img-version-mobile" alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" style="cursor:pointer" onclick="window.location.href='@Url.RouteUrl("Product", new { SeName = Model.SeName })'" />

            @if (Model.OutStock)
            {
                <div class="message-error" style="font-weight:900;font-size: 0.8rem !important;"><ul>
    Call for availability
</ul></div>
            }

        </div>
        <div class="col-md-12">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="" style="text-align:center;">
                @*<input type="button" value="@T(" Products.Details")" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl(" Product", new { SeName=Model.SeName })')" />*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <input type="button" value="@(addToCartText)" class="button-2 product-box-add-to-cart-button" style="display:none" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" />
                    @*<img src="~/Themes/DefaultClean/Content/images/magnifying-glass.png" style="border-radius:5px;cursor:pointer;" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })');return false;" />*@
                    <img class="btn-home-first-mobile btn-addtocart-card-mobile" src="~/images/shopping_cart.svg" width="20" height="20" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;" data-toggle="modal" data-target="#modalAddToCart"/>
                    <img class="btn-home-first-mobile btn-addtocart-card-desktop" src="~/images/shopping_cart.svg" width="20" height="20" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"/>
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <input type="button" value="@T(" ShoppingCart.AddToCompareList")" title="@T(" ShoppingCart.AddToCompareList")" class="button-2 add-to-compare-list-button d-none" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;" />
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <img class="ml-2 btn-home-first-mobile btn-addtowish-card-mobile" src="~/images/favorite_border.svg" width="20" height="20" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;"  data-toggle="modal" data-target="#modalAddToWish" />
                    <img class="ml-2 btn-home-first-mobile btn-addtowish-card-desktop" src="~/images/favorite_border.svg" width="20" height="20" style="border-radius:5px;cursor:pointer;" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                    @*<img src="~/Themes/DefaultClean/Content/images/wishlist-icon.png" style="border-radius: 5px; cursor: pointer; " onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />*@
                    <input type="button" value="@T(" ShoppingCart.AddToWishlist")" title="@T(" ShoppingCart.AddToWishlist")" class="button-2 add-to-wishlist-button d-none" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;" />
                }
            </div>
        </div>
        <div class="col-md-12 mt-3" style="height: 75px;">
            <h2 class="product-titlev2">
                <a style="text-align: center;" href="@Url.RouteUrl(" Product", new {SeName=Model.SeName})">@Model.Name</a>
            </h2>
        </div>
        <div class="col-md-12">
            @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
            {
                <div class="sku">
                    @Model.Sku
                </div>
            }
            @if (Model.ReviewOverviewModel.AllowCustomerReviews)
            {
                var ratingPercent = 0;
                if (Model.ReviewOverviewModel.TotalReviews != 0)
                {
                    ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
                }
                <div class="product-rating-box" title="@string.Format(T(" Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-12">
            <div class="prices">
                @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                {
                    <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                }
                <span class="price actual-price">@Model.ProductPrice.Price</span>
                @if (Model.ProductPrice.DisplayTaxShippingInfo)
                {
                    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                    //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                    //of course, you can modify appropriate locales to include VAT info there
                    <span class="tax-shipping-info">
                        @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                    </span>
                }
                @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                {
                    <div class="base-price-pangv">
                        @Model.ProductPrice.BasePricePAngV
                    </div>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>


</div>
