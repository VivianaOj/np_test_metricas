@model OrderDetailsModel
@{
    if (!Model.PrintMode)
    {
        Layout = "_ColumnsOne";
    }
    else
    {
        Layout = "_Print";
    }
    //title
    Html.AddTitleParts(T("PageTitle.OrderDetails").Text);
    //page class
    Html.AppendPageCssClassParts("html-order-details-page");
}
@if (Model.PrintMode)
{
    <script asp-location="Footer">
        $(document).ready(function () {
            window.print();
        });
    </script>
}


<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Raleway:wght@200;500;700&display=swap" rel="stylesheet">
<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Lato&family=Raleway:wght@200;500;700&display=swap" rel="stylesheet">

<div class="page order-details-page">
    <br />
    <br />
    <div class="page_title">
        <h1>Order Details</h1>
    </div>
    <div class="page-body">
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-4" style="text-align:left;">
                <p class="card-order-text">#@Model.Id</p>
            @*<div class="col-md-1"></div>*@
                <p class="card-order-title">Status</p>
                @if (@Model.OrderStatus != "Pending")
                {
                    <div class="btn btn-info btn-none">@Model.OrderStatus</div>
                    <p class="card-order-title">Payment Status</p>
                    <div class="btn btn-success btn-none">@Model.PaymentMethodStatus</div>
                }
                @if (@Model.OrderStatus == "Pending")
                {
                    <div class="btn btn-danger btn-none">@Model.OrderStatus</div>
                    <p class="card-order-title">Payment Status</p>
                    <div class="btn btn-danger btn-none">@Model.PaymentMethodStatus</div>
                }
                <p class="card-order-title" style="padding-bottom:0px;">Invoice</p>
                <p class="card-order-text3"># @Model.CustomOrderNumber</p>
                <p class="card-order-title estimated-arrival">Estimated arrival: @Model.CreatedOn.ToString("D")</p>
                <p class="card-order-title" style="padding-bottom:0px;">Contact Info</p>
                <p class="card-order-text3">@Model.BillingAddress.FirstName @Model.BillingAddress.LastName</p>
                <p class="card-order-title" style="padding-bottom:0px;">Shipping Info</p>
                <div style="width: 400px;">
                    <div class="card-order-text3">
                        @if (Model.BillingAddress.CompanyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.Company))
                        {
                            <p class="card-order-shipping-info">@Model.BillingAddress.Company</p>
                        }
                        @if (Model.BillingAddress.StreetAddressEnabled)
                        {
                            <p class="card-order-shipping-info">@Model.BillingAddress.Address1</p>
                        }
                        @if (Model.BillingAddress.StreetAddress2Enabled && !string.IsNullOrEmpty(Model.BillingAddress.Address2))
                        {
                            <p class="card-order-shipping-info">@Model.BillingAddress.Address2</p>
                        }

                        @if (Model.BillingAddress.CityEnabled && !string.IsNullOrEmpty(Model.BillingAddress.City) ||
             Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County) ||
             Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
             Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                        {
                            <p class="card-order-shipping-info">
                                @if (Model.BillingAddress.CityEnabled && !string.IsNullOrEmpty(Model.BillingAddress.City))
                                {
                                    @Model.BillingAddress.City
                                    @if (Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County) ||
                         Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
                         Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.BillingAddress.CountyEnabled && !string.IsNullOrEmpty(Model.BillingAddress.County))
                                {
                                    @Model.BillingAddress.County
                                    @if (Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName) ||
                         Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.BillingAddress.StateProvinceEnabled && !string.IsNullOrEmpty(Model.BillingAddress.StateProvinceName))
                                {
                                    @Model.BillingAddress.StateProvinceName
                                    @if (Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                                    {
                                        <text>,</text>
                                    }
                                }
                                @if (Model.BillingAddress.ZipPostalCodeEnabled && !string.IsNullOrEmpty(Model.BillingAddress.ZipPostalCode))
                                {
                                    @Model.BillingAddress.ZipPostalCode
                                }
                            </p>
                        }
                        @if (Model.BillingAddress.CountryEnabled && !string.IsNullOrEmpty(Model.BillingAddress.CountryName))
                        {
                            <p class="card-order-shipping-info">
                                @Model.BillingAddress.CountryName
                            </p>
                        }
                    </div>
                </div>
                <p class="card-order-title" style="padding-bottom:0px;">Payment Method</p>
                <p class="card-order-text3"><i class="nn- nn-card card-order-icon-size"></i> ******0000</p>
            </div>
            <div class="col-md-2 order-sumary-section">
                <div class="row">
                    <div class="col-md-12" style="padding-bottom:30px;">
                        <p class="order-sumary-title">Order Sumary</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p class="order-sumary-label">Sub-Total</p>
                    </div>
                    <div class="col-md-6">
                        <p class="order-sumary-number">@Model.OrderSubtotal</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p class="order-sumary-label">Shipping</p>
                    </div>
                    <div class="col-md-6">
                        <p class="order-sumary-number">$0.00 ??</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p class="order-sumary-label">Tax</p>
                    </div>
                    <div class="col-md-6">
                        <p class="order-sumary-number">@Model.Tax</p>
                    </div>
                </div>
                <div class="line-div"></div>
                <div class="row">
                    <div class="col-md-6">
                        <p class="order-sumary-total">Total</p>
                    </div>
                    <div class="col-md-6">
                        <p class="order-sumary-number-total">@Model.OrderTotal</p>
                    </div>
                </div>
            </div>
            <div class="col-md-2"></div>
        </div>
        <div class="row">
            <div class="col-md-8"></div>
            <div class="col-md-1">
                @if (!Model.PrintMode)
                {
                    <div class="page-title">
                        @if (Model.PdfInvoiceDisabled)
                        {
                            <a href="@Url.RouteUrl("GetOrderPdfInvoice", new { orderId = Model.Id })" class="button-2 pdf-invoice-button">@T("Order.GetPDFInvoice")</a>
                        }
                        else
                        {
                            <a href="@Url.RouteUrl("PrintOrderDetails", new { orderId = Model.Id })" target="_blank" class="button-2 pdf-invoice-button">@T("Order.Print")</a>
                        }
                    </div>
                }
            </div>
            <div class="col-md-2"></div>
        </div>
    </div>
</div>

<div class="page order-details-page">
    <div class="page-body">
        @if (!Model.PrintMode && Model.Shipments.Count > 0)
        {
        }
        @if (Model.Items.Count > 0)
        {
            if (!Model.PrintMode && Model.OrderNotes.Count > 0)
            {
            }

            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBeforeproducts, additionalData = Model })
            <div class="section products">
                @foreach (var item in Model.Items)
                {
                    <div class="row">
                        <div class="col-md-3"></div>
                        <!-- detlle producto -->
                        <div class="col-md-7">
                            <div class="row">
                                <!-- imagen y nombres -->
                                <div class="col-md-9">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <img style="width:100%;margin-left:-15px;" src="https://previews.123rf.com/images/myvector/myvector1606/myvector160600281/57852872-el-producto-no-est%C3%A1-disponible-icono.jpg" />
                                        </div>
                                        <div class="col-md-5" style="margin-left: -45px">
                                            @if (!Model.PrintMode)
                                            {
                                                <div style="text-align:left" class="attributes order-sumary-attributes">
                                                    <strong><a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@item.ProductName</a></strong>
                                                </div>
                                            }
                                            else
                                            {
                                                @item.ProductName
                                            }
                                            @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                            {
                                                <div style="text-align:left;color:#546E7A" class="attributes">
                                                    @Html.Raw(item.AttributeInfo)
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(item.RentalInfo))
                                            {
                                                <div style="text-align:left;color:#546E7A" class="rental-info">
                                                    @Html.Raw(item.RentalInfo)
                                                </div>
                                            }
                                            @if (item.DownloadId > 0)
                                            {
                                                <div style="text-align:left;color:#546E7A" class="download">
                                                    <a href="@Url.RouteUrl("GetDownload", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.Download")</a>
                                                </div>
                                            }
                                            @if (item.LicenseId > 0)
                                            {
                                                <div style="text-align:left;color:#546E7A" class="download license">
                                                    <a href="@Url.RouteUrl("GetLicense", new { orderItemId = item.OrderItemGuid })">@T("DownloadableProducts.Fields.DownloadLicense")</a>
                                                </div>
                                            }
                                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsProductLine, additionalData = item })
                                            <div class="rental-info order-sumary-vendor">
                                                Vendor: <strong>@item.VendorName</strong>
                                            </div>
                                            <div class="rental-info order-sumary-vendor">
                                                Quantity: <strong>@item.Quantity</strong>
                                            </div>
                                            <br />
                                        </div>
                                        <!-- totales -->
                                        <div class="col-md-3">
                                            <div class="attributes order-sumary-number-total-label">
                                                <label>Total</label><label style="margin-left: 32px;" class="order-sumary-number-total">@item.SubTotal</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <!-- botones por producto -->
                                <div class="col-md-3">
                                    <button class="btn btn-infos"> Rate this Product </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageAfterproducts, additionalData = Model })
            <div class="section options">
                @if (!string.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                {
                    <div class="selected-checkout-attributes">
                        @Html.Raw(Model.CheckoutAttributeInfo)
                    </div>
                }
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderDetailsPageBottom, additionalData = Model })
    </div>
</div>
